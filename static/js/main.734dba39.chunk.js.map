{"version":3,"sources":["Components/Navbar.js","Components/Renderer/Product/Product.js","Components/Renderer/Renderer.js","App.js","index.js"],"names":["NavBar","props","Navbar","fixed","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","fill","Link","onClick","fetchProducts","Product","state","loading","availability","handleClick","manufacturer","a","checkAvailability","setState","result","this","data","name","color","price","Card","style","width","margin","marginTop","marginBottom","Body","Title","Text","Button","disabled","Component","Renderer","renderMoreProducts","products","amountToRender","rendered","amount","concat","slice","prevProps","Container","Row","map","i","Col","size","block","App","message","selected","extractAvailability","string","includes","undefined","find","fetch","response","json","push","searchMe","o","availabilityData","toUpperCase","DATAPAYLOAD","category","p","items","findIndex","length","Jumbotron","fluid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.734dba39.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\n\r\nconst NavBar = (props) => {\r\n  return (\r\n    <Navbar fixed=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand>Navigation</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav fill=\"true\">\r\n          <Nav.Link onClick={() => {props.fetchProducts(\"jackets\")}}>Jackets</Nav.Link>\r\n          <Nav.Link onClick={() => {props.fetchProducts(\"shirts\")}}>Shirts</Nav.Link>\r\n          <Nav.Link onClick={() => {props.fetchProducts(\"accessories\")}}>Accessories</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\r\nimport { Button, Card } from 'react-bootstrap';\r\n\r\n\r\nclass Product extends Component {\r\n\r\n  state = { \r\n    loading : false,\r\n    availability : \"Check availability\"\r\n  }\r\n\r\n  handleClick = async (manufacturer, id) => {\r\n\r\n    const { checkAvailability } = this.props\r\n\r\n    this.setState({loading : true})\r\n\r\n    const result = await checkAvailability(manufacturer, id)\r\n\r\n    this.setState({availability : result})\r\n  }\r\n\r\n  render() { \r\n    const { availability, loading } = this.state\r\n    const { name, id, color, manufacturer, price } = this.props.data\r\n    return ( \r\n      <Card style={{ width: '18rem', margin:\"auto\", marginTop : \"10px\", marginBottom: \"10px\" }}>\r\n      <Card.Body>\r\n        <Card.Title>{name}</Card.Title>\r\n        <Card.Text>Id : {id}</Card.Text>\r\n        <Card.Text>manufacturer : {manufacturer}</Card.Text>\r\n        <Card.Text>Color : {color}</Card.Text>\r\n        <Card.Text>price : {price}</Card.Text>\r\n        <Button variant=\"secondary\" disabled={loading} onClick={() => {this.handleClick(manufacturer, id)}}>{availability}</Button>\r\n      </Card.Body>\r\n    </Card>)\r\n  }\r\n}\r\n \r\nexport default Product;\r\n\r\n","import React, { Component } from 'react';\r\nimport { Button, Col, Row, Container } from 'react-bootstrap';\r\nimport Product from './Product/Product';\r\n\r\n\r\n\r\n\r\n\r\nclass Renderer extends Component {\r\n    constructor(props) {\r\n\r\n        super(props)\r\n\r\n        const { products, amountToRender } = props\r\n\r\n        this.state = {\r\n            amount : amountToRender,\r\n            rendered : products.slice(0, amountToRender)\r\n        }\r\n    }\r\n\r\n    renderMoreProducts = () => {\r\n\r\n        const { products, amountToRender } = this.props\r\n\r\n        let { rendered, amount } = this.state\r\n        \r\n        rendered = rendered.concat(products.slice(amount, amount + amountToRender))\r\n\r\n        amount += amountToRender\r\n\r\n        this.setState({rendered, amount})\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        const { products, amountToRender } = this.props\r\n\r\n        if (prevProps.products !== this.props.products) { \r\n\r\n            this.setState({rendered : products.slice(0, amountToRender)})\r\n\r\n        }\r\n      }\r\n    \r\n\r\n    render() {\r\n\r\n        const { rendered } = this.state\r\n        \r\n        return ( \r\n            <Container>\r\n                <Row>\r\n                    {rendered.map(i => {return <Col key={i.id}><Product checkAvailability={this.props.checkAvailability} data={i}/></Col>})}\r\n                </Row>\r\n                <Row>\r\n                    <Button onClick={() => {this.renderMoreProducts()}} variant=\"secondary\" size=\"lg\" block>\r\n                    Load more...\r\n                    </Button>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Renderer;\r\n\r\n","import NavBar from './Components/Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport Renderer from './Components/Renderer/Renderer';\nimport { Jumbotron } from 'react-bootstrap';\n\nclass App extends Component {\n  state = {\n    message : \"Pick something\",\n    availability : [],\n    selected : null,\n    products : []\n  }\n\n  extractAvailability = (string) => { // Extract & return availability data from a chaotic string\n\n    \n    if (string.includes(\">INSTOCK<\")) {\n      return \"In stock\"\n    }\n    if (string.includes(\">OUTOFSTOCK<\")) {\n      return \"Out of stock\"\n    }\n    if (string.includes(\">LESSTHAN10<\")) {\n      return \"Less than 10\"\n    }\n    else {\n      return \"NAN\"\n    }\n  }\n\n\n  checkAvailability = async (manufacturer, id) => { // Called by product, return availability data of a product\n\n    try {\n\n      let { availability } = this.state\n\n      if (availability.find(i => i.manufacturer === manufacturer) === undefined) { // Check if data already fetched\n  \n        const response = await fetch(`https://bad-api-assignment.reaktor.com/availability/${manufacturer}`)\n  \n        const data = await response.json()\n  \n        availability.push({\n          manufacturer : manufacturer,\n          products : data.response\n        })\n  \n        this.setState({ availability : availability })\n      }\n  \n  \n      const searchMe = availability.find(o => o.manufacturer === manufacturer)\n  \n      const availabilityData = searchMe.products.find(i => i.id === id.toUpperCase())\n  \n      return this.extractAvailability(availabilityData.DATAPAYLOAD)\n    }\n    \n    catch {\n      return \"Failed to fetch data\"\n    }\n    \n  }\n  \n  fetchProducts = async (category) => { // Fetch & get products\n\n    try {\n      let { products, selected } = this.state\n\n      if (products.find(p => p.category === category) === undefined) { // Check if data is already fetched\n  \n        const response = await fetch(`https://bad-api-assignment.reaktor.com/products/${category}`)\n  \n        const items = await response.json()\n    \n        products.push({\n          category : category, \n          items : items\n        })\n    \n      }\n  \n      selected = products.findIndex(i => i.category === category) // Shows current Products\n  \n      this.setState({products : products, selected : selected})\n    }\n\n    catch {\n      this.setState({message : \"Could not Connect to API\"})\n    }\n\n  }\n  \n  render() { \n    const {selected, products, message} = this.state\n\n    if (products.length <= 0) {\n      return (<div>\n      <NavBar fetchProducts={this.fetchProducts}/>\n      <Jumbotron fluid>\n        <h1>{message}</h1>\n      </Jumbotron>\n        \n      </div>)\n    }\n\n    else {\n      return ( \n      <div>\n        <NavBar fetchProducts={this.fetchProducts}/>\n        <div style={{marginBottom:\"30px\"}}></div>\n        <Renderer checkAvailability={this.checkAvailability} products={products[selected].items} amountToRender={10}/>\n      </div>\n      );\n    }\n\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}